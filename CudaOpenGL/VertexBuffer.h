#pragma once

#include "../libs/libExt/libExt.h"

// Более подробное описание класса: http://steps3d.narod.ru/tutorials/tutorial-VBO.html

/// <summary>
/// Класс вершинного буфера.
/// </summary>
class VertexBuffer
{
	/// <summary>
	/// Идентификатор вершинного буфера. Нулевое значение зарезервировано.
	/// </summary>
	GLuint id;


	GLenum target;
	bool ok;

public:
	/// <summary>
	/// Инициализация вершинного буфера.
	/// </summary>
	VertexBuffer();

	/// <summary>
	/// Уничтожение уже существующего вершинного буфера.
	/// </summary>
	~VertexBuffer();

	/// <summary>
	/// Получение идентификатора текущего вершинного буфера.
	/// </summary>
	/// <returns></returns>
	GLenum getId() const
	{
		return id;
	}

	/// <summary>
	/// Выбор вершинного буфера как текущего.
	/// После этого его можно проинициализировать или использовать в качестве источника данных.
	/// </summary>
	/// <param name="theTarget">Тип данных, который будет содержать буфер.</param>
	void bind(GLenum theTarget);

	/// <summary>
	/// Снятие выбора вершинного буфера как текущего.
	/// </summary>
	void unbind();

	/// <summary>
	/// Инициализация вершинного буфера и наполнение данными.
	/// </summary>
	/// <param name="size">Размер буфера в байтах.</param>
	/// <param name="ptr">Указатель на область памяти, содержающая значения,
	/// которые следует использовать для инициализации данного вершинного буфера.</param>
	/// <param name="usage">Информация о предполагаемом использовании буфера.
	/// Эта информация служит для того, чтобы система могла более эффектифно 
	/// управлять выделением памяти для вершинного буфера.</param>
	void setData(unsigned size, const void* ptr, GLenum usage);

	/// <summary>
	/// Изменение данных в уже существующем буфере.
	/// </summary>
	/// <param name="offs">Начало (смещение) изменяемого блока данных внутри буфера.</param>
	/// <param name="size">Размер изменяемого блока данных внутри буфера.</param>
	/// <param name="ptr">Указатель на область памяти, садержащая новые значения.</param>
	void setSubData(unsigned offs, unsigned size, const void* ptr);

	/// <summary>
	/// Чтение блока данных из вершинного буфера.
	/// </summary>
	/// <param name="offs">Смещение читаемого блока данных внутри буфера.</param>
	/// <param name="size">Размер читаемого блока данных внутри буфера.</param>
	/// <param name="ptr">Указатель на область памяти, в которую считываются данные.</param>
	void getSubData(unsigned offs, unsigned size, void* ptr);

	/// <summary>
	/// Отображение текущего вершинного буфера в системную память.
	/// </summary>
	/// <param name="access">Информация о предполагаемом использовании буфера.
	/// Эта информация служит для того, чтобы система могла более эффектифно 
	/// управлять выделением памяти для вершинного буфера.</param>
	/// <returns>Если отображение текущего вершинного буфера прошло успешно, 
	/// то возвращается ненулевой указательно на блок памяти,
	/// с которым можно работать как с самим вершинным буфером.</returns>
	void* map(GLenum access);

	/// <summary>
	/// Закрытие отображения текущего вершинногобуфера из системной памяти.
	/// </summary>
	/// <returns>После выполнения этой команды полученный ранее указательно нельзя использовать.</returns>
	bool unmap();

	/// <summary>
	/// Очистка текущего буфера.
	/// </summary>
	void clear()
	{
		glBufferDataARB(target, 0, NULL, 0/*usage*/);
	}

	/// <summary>
	/// Проверка поддержки расширения ARB_vertex_buffer_object.
	/// Данное расширение предоставляет возможность кэшировать различные типы данных в быстрой памяти GPUю
	/// </summary>
	/// <returns></returns>
	static bool isSupported();
};